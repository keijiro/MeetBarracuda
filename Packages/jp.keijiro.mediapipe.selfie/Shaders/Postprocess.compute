#pragma kernel Postprocess1
#pragma kernel Postprocess2
#pragma kernel Postprocess3

uint2 _Dimensions;
StructuredBuffer<float> _Input;
RWStructuredBuffer<float> _Output;
RWTexture2D<float> _OutputTexture;

float GetInput(uint x, uint y)
{
    return _Input[x + y * _Dimensions.x];
}

void SetOutput(uint x, uint y, float v)
{
    _Output[x + y * _Dimensions.x] = v;
}

// Postprocess1: Erosion

[numthreads(8, 8, 1)]
void Postprocess1(uint2 id : SV_DispatchThreadID)
{
    uint xL = max(id.x, 1) - 1;
    uint xR = min(id.x + 1, _Dimensions.x - 1);
    uint yT = max(id.y, 1) - 1;
    uint yB = min(id.y + 1, _Dimensions.y - 1);

    float m1 = GetInput(id.x, id.y);
    float m2 = GetInput(xL, id.y);
    float m3 = GetInput(xR, id.y);
    float m4 = GetInput(id.x, yT);
    float m5 = GetInput(id.x, yB);

    SetOutput(id.x, id.y, min(min(min(min(m1, m2), m3), m4), m5));
}

// Postprocess2: horizontal bilateral filter (3-tap)

float GetWeight(float i1, float i2)
{
    float d = i2 - i1;
    return exp(-0.5 * d * d);
}

[numthreads(8, 8, 1)]
void Postprocess2(uint2 id : SV_DispatchThreadID)
{
    uint xL = max(id.x, 1) - 1;
    uint xR = min(id.x + 1, _Dimensions.x - 1);

    float m1 = GetInput(xL, id.y);
    float m2 = GetInput(id.x, id.y);
    float m3 = GetInput(xR, id.y);

    float w1 = 0.27901 * GetWeight(m1, m2);
    float w2 = 0.44198;
    float w3 = 0.27901 * GetWeight(m3, m2);

    float o = (m1 * w1 + m2 * w2 + m3 * w3) / (w1 + w2 + w3);

    SetOutput(id.x, id.y, o);
}

// Postprocess3: Vertical bilateral filter (3-tap)

[numthreads(8, 8, 1)]
void Postprocess3(uint2 id : SV_DispatchThreadID)
{
    uint yT = max(id.y, 1) - 1;
    uint yB = min(id.y + 1, _Dimensions.y - 1);

    float m1 = GetInput(id.x, yT);
    float m2 = GetInput(id.x, id.y);
    float m3 = GetInput(id.x, yB);

    float w1 = 0.27901 * GetWeight(m1, m2);
    float w2 = 0.44198;
    float w3 = 0.27901 * GetWeight(m3, m2);

    float o = (m1 * w1 + m2 * w2 + m3 * w3) / (w1 + w2 + w3);

    _OutputTexture[uint2(id.x, _Dimensions.y - 1 - id.y)] = o;
}
